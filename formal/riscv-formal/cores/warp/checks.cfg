[options]
isa rv64ic
nret 2
# solver z3

[depth]
# arithmetic instructions retire on ch0
insn_add_ch0    10
# insn_slt_ch0    20
# insn_sltu_ch0   20
# insn_addi_ch0   20
# insn_slti_ch0   20
# insn_sltiu_ch0  20
# insn_lui_ch0    20
# insn_auipc_ch0  20
# insn_addw_ch0   20
# insn_subw_ch0   20
# insn_addiw_ch0  20

# logical instructions retire on ch1
# insn_or_ch1     20
# insn_and_ch1    20
# insn_xor_ch1    20
# insn_ori_ch1    20
# insn_andi_ch1   20
# insn_xori_ch1   20

# reg       15   25
# reg       1 3
# 25
#pc_fwd    10    30
#pc_bwd    10    30
# liveness  1  10 30
# unique    1  10 30
# causal    10    30
# cover     1     15

# csrw            15
# csr_ill         15
# csrc_inc   1    15
# csrc_upcnt 1    15

[sort]
reg_ch0

# [csrs]
# mcycle          inc upcnt
# minstret        inc upcnt

# [illegal_csrs]
# c00     u       w
# c80     u       w
# c02     u       w
# c82     u       w

[defines]
`define RISCV_FORMAL_ALIGNED_MEM
# `define RISCV_FORMAL_ALTOPS
`define RISCV_FORMAL_UMODE
# `define PICORV32_TESTBUG_NONE
# `define DEBUGNETS

# [defines liveness]
# `define PICORV32_FAIRNESS

[verilog-files]
@basedir@/cores/@core@/wrapper.sv
@basedir@/cores/@core@/warp_defines.v
@basedir@/cores/@core@/warp_util.v
@basedir@/cores/@core@/warp_fetch.v
@basedir@/cores/@core@/warp_decode.v
@basedir@/cores/@core@/warp_issue.v
@basedir@/cores/@core@/warp_integer.v
@basedir@/cores/@core@/warp_hart.v

# [cover]
# always @* if (!reset) cover (channel[0].cnt_insns == 2);
